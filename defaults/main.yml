---
# defaults file for ansible-haproxy

# Defines password for admin user to login to admin page
haproxy_admin_password: admin

# Defines http port to listen on for admin page
haproxy_admin_port: 9090

# Defines admin user to login to admin page
haproxy_admin_user: admin

# Defines is HAProxy should be configured
haproxy_config: false

# Defines load balancer configurations to enable/disable
#
# backend_backups - Defines if all but one host should be a backup(standby) to the primary
#
# backend_backups_primary - Defines the host which should be considered the primary
# when setting backend_backups: true
#
# Example of using backups(standby)
# backend openstack_controllers-3306
#     balance source
#     default-server inter 2000 rise 2 fall 5
#     server controller01 controller01:3306 check
#     server controller02 controller02:3306 backup check
#     server controller03 controller03:3306 backup check
#
# backend_checks - Defines if host checks should be enabled
#
# stickiness - Defines if session cookies should be used for sticky sessions
#
# tcp_checks - Define any tcp-check options you desire
haproxy_configs:
  []
  # - name: http-80
  #   backend_name: http_back
  #   balance: roundrobin
  #   enabled: true
  #   frontend_name: http_front
  #   frontend_bind_address: "{{ hostvars[inventory_hostname]['ansible_'+bind_interface]['ipv4']['address'] }}"
  #   frontend_bind_port: 80
  #   server_template:
  #     prefix: mywebapp
  #     range: 10
  #     fqdn: _web._tcp.service.consul
  #     resolvers: consul
  #     params:
  #       - resolve-opts
  #       - allow-dup-ip
  #       - resolve-prefer ipv4
  #       - check
  # - name: squid-3128
  #   backend_backups: false
  #   backend_backups_primary: node1
  #   backend_checks: true
  #   backend_name: squid-servers
  #   backend_servers_bind_port: 3128
  #   backend_servers:
  #     - 192.168.250.10
  #     - 192.168.250.11
  #   balance: roundrobin
  #   default_server_options:
  #     - name: maxconn
  #       value: 256
  #     - name: maxqueue
  #       value: 128
  #     - name: weight
  #       value: 100
  #   enabled: true
  #   frontend_bind_address: "{{ haproxy_lb_vip }}"
  #   frontend_bind_port: 8080
  #   frontend_name: squid-in
  #   frontend_ssl: false
  #   frontend_ssl_cert: "{{ haproxy_ssl['bundled_cert'] }}"
  #   mode: tcp
  #   options:
  #     - tcplog
  #     # - httpchk
  #   stickiness: true
  #   tcp_checks:
  #     - connect
  #     - send PING\r\n

# Defines default configurations for default block
haproxy_defaults:
  # - errorfile 400 /etc/haproxy/errors/400.http
  # - errorfile 403 /etc/haproxy/errors/403.http
  # - errorfile 408 /etc/haproxy/errors/408.http
  # - errorfile 500 /etc/haproxy/errors/500.http
  # - errorfile 502 /etc/haproxy/errors/502.http
  # - errorfile 503 /etc/haproxy/errors/503.http
  # - errorfile 504 /etc/haproxy/errors/504.http
  - log global
  - maxconn 40000
  - mode tcp
  - option dontlognull
  - option redispatch
  - option tcp-smart-accept
  - option tcp-smart-connect
  - option tcplog
  - retries 3
  - timeout client 50000
  - timeout connect 50000
  - timeout queue 5000
  - timeout server 50000

haproxy_debian_repo: "ppa:vbernat/haproxy-{{ haproxy_version }}"

haproxy_enable_admin_page: true

# Defines if logs should be sent to remote syslog server
haproxy_enable_remote_syslog: false

# Defines global settings for global block
haproxy_global:
  - chroot /var/lib/haproxy
  - group haproxy
  - maxconn 40000
  - spread-checks 3
  - "stats socket {{ haproxy_socket_file }} mode 660 level admin"
  - stats timeout 30s
  - user haproxy

# Defines if using a highly available setup. i.e. multiple haproxy load balancers
haproxy_ha: false

# Defines the prefix path/file for SSL cert(s) when using HA
## We do this in order to generate the keys on the primary and sync the keys to
## all other nodes in the HA setup.
haproxy_ha_key_file_prefix: "/etc/ssl/{{ haproxy_ha_primary }}"

# Defines the primary host when in HA mode
haproxy_ha_primary: node0

# Defines haproxy default location
haproxy_home: /etc/haproxy

haproxy_lb_vip: "{{ ansible_default_ipv4.address }}"

haproxy_pri_domain_name: example.org

# Define HAProxy resolvers to use for server-templates
haproxy_resolvers:
  []
  # - name: consul
  #   nameservers: |
  #     {% set nameservers = [] %}
  #     {% for host in groups['consul_servers'] %}
  #     {%   set _ = nameservers.append({'name': host, 'ip': hostvars[host]['ansible_' + consul_bind_interface]['ipv4']['address'], 'port': 8600}) %}
  #     {% endfor %}
  #     {{ nameservers }}
  #   options:
  #     - accepted_payload_size 8192
  #     - hold valid 5s

haproxy_socket_file: /var/run/haproxy.sock

# Defines SSL cert(s) info
haproxy_ssl:
  []
  # bundled_cert: "/etc/ssl/{{ inventory_hostname }}-bundle.pem"
  # csr_key_file: "/etc/ssl/{{ inventory_hostname }}-csr.pem"
  # enabled: false
  # generate_keys: false
  # private_key_file: "/etc/ssl/private/{{ inventory_hostname }}-key.pem"
  # private_key_size: 4096
  # private_key_type: RSA
  # protocols:
  #   - TLSv1
  #   - TLSv1.1
  #   - TLSv1.2
  # public_key_file: "/etc/ssl/public/{{ inventory_hostname }}-cert.pem"
  # public_key_valid_days: 1825
  # regenerate_keys: false

# Define any sysctl settings to apply
haproxy_sysctl_settings:
  []
  # - name: net.ipv4.ip_nonlocal_bind
  #   value: "1"
  #   state: present

# Define any syslog servers
haproxy_syslog_servers:
  []
  # - name: "logstash.{{ haproxy_pri_domain_name }}"
  #   proto: tcp
  #   port: 514

haproxy_version: 2.0

# permission for file haproxy.log written by rsyslog
# must be quoted
haproxy_log_file_perms: '0640'
